STAT 545A Troubleshooting Exercise for Milestone 1
# What is this project?
### This project is the first collaborative project for STATS545A titled "Milestone 1".
## What files are in the project folder / GitHub repository, at a high level?
### This project contains a Teamwork file, which has our team contract. It also contains a Troubleshooting file used to complete exercise 6 of milestone 1.
## How can they run code that appears in your folder / GitHub repository?
One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like [Github Desktop](https://desktop.github.com)
# What is this project?
### This project is the first collaborative project for STATS545A titled "Milestone 1".
## What files are in the project folder / GitHub repository, at a high level?
### This project contains a Teamwork file, which has our team contract. It also contains a Troubleshooting file used to complete exercise 6 of milestone 1.
## How can they run code that appears in your folder / GitHub repository?
One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like [Github Desktop](https://desktop.github.com).
# What is this project?
### This project is the first collaborative project for STATS545A titled "Milestone 1".
## What files are in the project folder / GitHub repository, at a high level?
### This project contains a Teamwork file, which has our team contract. It also contains a Troubleshooting file used to complete exercise 6 of milestone 1.
## How can they run code that appears in your folder / GitHub repository?
One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like [Github Desktop](https://desktop.github.com).
One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like [Github Desktop](https://desktop.github.com).
# What is this project?
### This project is the first collaborative project for STATS545A titled "Milestone 1".
## What files are in the project folder / GitHub repository, at a high level?
### This project contains a Teamwork file, which has our team contract. It also contains a Troubleshooting file used to complete exercise 6 of milestone 1.
## How can they run code that appears in your folder / GitHub repository?
One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like [Github Desktop](https://desktop.github.com).
# What is this project?
### This project is the first collaborative project for STATS545A titled "Milestone 1".
## What files are in the project folder / GitHub repository, at a high level?
### This project contains a Teamwork file, which has our team contract. It also contains a Troubleshooting file used to complete exercise 6 of milestone 1.
## How can they run code that appears in your folder / GitHub repository?
1. One can run the code provided in our project folder by first cloning the repository to their local. To do that, one can use 3rd party apps like _[Github Desktop](https://desktop.github.com)_.
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(error = TRUE)
### ERROR HERE ###
load.packages(dslabs)
load.packages("testthar")
load.packages("testthat")
clear
cls
knitr::opts_chunk$set(error = TRUE)
### ERROR HERE ###
load.packages(dslabs)
install.packages("dslabs")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- rename(movieLens, user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- rename(movieLens, user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
knitr::opts_chunk$set(error = TRUE)
### ERROR HERE ###
library(dslabs)
library(tidyverse)
library(stringr)
# library("devtools") # Do not run this if you already have this package installed!
# devtools::install_github("JoeyBernhardt/singer")
library(gapminder)
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
class(dslabs::movielens)
movieLens <- as_tibble(dslabs::movielens)
head(movieLens)
### ERROR HERE ###
filter(movieLens, genres == "Drama")
filter(movieLens, !genres == "Drama")
filter(movieLens, year > 2000)
filter(movieLens, year == 1999 | year == 2000)
filter(movieLens, rating > 4.5, year < 1995)
### ERROR HERE ###
movieLens %>%
filter(!genres == "Drama") %>%
select(title, genres,everything())
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == userId,
movie_id == movieId)
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == userId,
movie_id == movieId)
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id == "userId",
movie_id == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename("user_id" == "userId",
"movie_id" == "movieId")
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id = userId,
movie_id = movieId)
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id = userId,
movie_id = movieId)
### ERROR HERE ###
movieLens <- movieLens %>%
rename(user_id = userId,
movie_id = movieId)
head(movieLens)
### ERROR HERE ###
mutate(movieLens,
average_rating = mean(rating))
### ERROR HERE ###
summarize(movieLens,
average_rating = mean(rating))
### ERROR HERE ###
summarise(movieLens,
average_rating = mean(rating))
movieLens %>%
group_by(title) %>%
tally()
### ERROR HERE ###
movieLens %>%
tally(year)
### ERROR HERE ###
movieLens %>%
tally(year)
### ERROR HERE ###
movieLens %>%
count(year)
### ERROR HERE ###
movieLens %>%
count(c(title, rating), sort = TRUE)
### ERROR HERE ###
movieLens %>%
tally(c(title, rating), sort = TRUE)
### ERROR HERE ###
movieLens %>%
tally(c(title, rating), sort = TRUE)
### ERROR HERE ###
movieLens %>%
tally(c(title, rating), sort = TRUE)
### ERROR HERE ###
movieLens %>%
count( rating, sort = TRUE) %>%
tally(title)
### ERROR HERE ###
movieLens %>%
count( rating, sort = TRUE) %>%
count(title)
### ERROR HERE ###
movieLens %>%
count(c(title, rating), sort = TRUE)
### ERROR HERE ###
movieLens %>%
mutate(min_rating = min(rating),
max_rating = max(rating))
### ERROR HERE ###
movieLens %>%
group_by("title")
### ERROR HERE ###
movieLens %>%
group_by(title)
### ERROR HERE ###
movieLens %>%
group_by(title)%>%
mutate(min_rating = min(rating),
max_rating = max(rating))
### ERROR HERE ###
movieLens %>%
group_by(title) %>%
mutate(min_rating = min(rating),
max_rating = max(rating))
### ERROR HERE ###
movieLens %>%
group_by(title) %>%
summarise(min_rating = min(rating),
max_rating = max(rating))
### ERROR HERE ###
movieLens %>%
count(c(title, rating), sort = TRUE)
?tally
### ERROR HERE ###
movieLens %>%
group_by(title, rating) %>%
count(sort = TRUE)
### ERROR HERE ###
movieLens %>%
group_by( rating, title) %>%
count(sort = TRUE)
### ERROR HERE ###
movieLens %>%
group_by( title, rating) %>%
count(sort = TRUE)
